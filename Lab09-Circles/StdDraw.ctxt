#BlueJ class context
comment0.params=
comment0.target=StdDraw()
comment1.params=
comment1.target=void\ setCanvasSize()
comment1.text=\r\n\ Sets\ the\ canvas\ (drawing\ area)\ to\ be\ 512-by-512\ pixels.\r\n\ This\ also\ erases\ the\ current\ drawing\ and\ resets\ the\ coordinate\ system,\r\n\ pen\ radius,\ pen\ color,\ and\ font\ back\ to\ their\ default\ values.\r\n\ Ordinarly,\ this\ method\ is\ called\ once,\ at\ the\ very\ beginning\r\n\ of\ a\ program.\r\n
comment10.params=
comment10.target=void\ setScale()
comment10.text=\r\n\ Sets\ the\ <em>x</em>-scale\ and\ <em>y</em>-scale\ to\ be\ the\ default\r\n\ (between\ 0.0\ and\ 1.0).\r\n
comment11.params=min\ max
comment11.target=void\ setXscale(double,\ double)
comment11.text=\r\n\ Sets\ the\ <em>x</em>-scale\ to\ the\ specified\ range.\r\n\r\n\ @param\ \ min\ the\ minimum\ value\ of\ the\ <em>x</em>-scale\r\n\ @param\ \ max\ the\ maximum\ value\ of\ the\ <em>x</em>-scale\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ (max\ \=\=\ min)}\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ min}\ or\ {@code\ max}\ is\ either\ NaN\ or\ infinite\r\n
comment12.params=min\ max
comment12.target=void\ setYscale(double,\ double)
comment12.text=\r\n\ Sets\ the\ <em>y</em>-scale\ to\ the\ specified\ range.\r\n\r\n\ @param\ \ min\ the\ minimum\ value\ of\ the\ <em>y</em>-scale\r\n\ @param\ \ max\ the\ maximum\ value\ of\ the\ <em>y</em>-scale\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ (max\ \=\=\ min)}\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ min}\ or\ {@code\ max}\ is\ either\ NaN\ or\ infinite\r\n
comment13.params=min\ max
comment13.target=void\ setScale(double,\ double)
comment13.text=\r\n\ Sets\ both\ the\ <em>x</em>-scale\ and\ <em>y</em>-scale\ to\ the\ (same)\ specified\ range.\r\n\r\n\ @param\ \ min\ the\ minimum\ value\ of\ the\ <em>x</em>-\ and\ <em>y</em>-scales\r\n\ @param\ \ max\ the\ maximum\ value\ of\ the\ <em>x</em>-\ and\ <em>y</em>-scales\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ (max\ \=\=\ min)}\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ min}\ or\ {@code\ max}\ is\ either\ NaN\ or\ infinite\r\n
comment14.params=x
comment14.target=double\ scaleX(double)
comment15.params=y
comment15.target=double\ scaleY(double)
comment16.params=w
comment16.target=double\ factorX(double)
comment17.params=h
comment17.target=double\ factorY(double)
comment18.params=x
comment18.target=double\ userX(double)
comment19.params=y
comment19.target=double\ userY(double)
comment2.params=canvasWidth\ canvasHeight
comment2.target=void\ setCanvasSize(int,\ int)
comment2.text=\r\n\ Sets\ the\ canvas\ (drawing\ area)\ to\ be\ <em>width</em>-by-<em>height</em>\ pixels.\r\n\ This\ also\ erases\ the\ current\ drawing\ and\ resets\ the\ coordinate\ system,\r\n\ pen\ radius,\ pen\ color,\ and\ font\ back\ to\ their\ default\ values.\r\n\ Ordinarly,\ this\ method\ is\ called\ once,\ at\ the\ very\ beginning\r\n\ of\ a\ program.\r\n\r\n\ @param\ \ canvasWidth\ the\ width\ as\ a\ number\ of\ pixels\r\n\ @param\ \ canvasHeight\ the\ height\ as\ a\ number\ of\ pixel\ s\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ canvasWidth}\ and\r\n\ \ \ \ \ \ \ \ \ {@code\ canvasHeight}\ are\ positive\r\n
comment20.params=
comment20.target=void\ clear()
comment20.text=\r\n\ Clears\ the\ screen\ to\ the\ default\ color\ (white).\r\n
comment21.params=color
comment21.target=void\ clear(java.awt.Color)
comment21.text=\r\n\ Clears\ the\ screen\ to\ the\ specified\ color.\r\n\r\n\ @param\ color\ the\ color\ to\ make\ the\ background\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ color}\ is\ {@code\ null}\r\n
comment22.params=
comment22.target=double\ getPenRadius()
comment22.text=\r\n\ Returns\ the\ current\ pen\ radius.\r\n\r\n\ @return\ the\ current\ value\ of\ the\ pen\ radius\r\n
comment23.params=
comment23.target=void\ setPenRadius()
comment23.text=\r\n\ Sets\ the\ pen\ size\ to\ the\ default\ size\ (0.002).\r\n\ The\ pen\ is\ circular,\ so\ that\ lines\ have\ rounded\ ends,\ and\ when\ you\ set\ the\r\n\ pen\ radius\ and\ draw\ a\ point,\ you\ get\ a\ circle\ of\ the\ specified\ radius.\r\n\ The\ pen\ radius\ is\ not\ affected\ by\ coordinate\ scaling.\r\n
comment24.params=radius
comment24.target=void\ setPenRadius(double)
comment24.text=\r\n\ Sets\ the\ radius\ of\ the\ pen\ to\ the\ specified\ size.\r\n\ The\ pen\ is\ circular,\ so\ that\ lines\ have\ rounded\ ends,\ and\ when\ you\ set\ the\r\n\ pen\ radius\ and\ draw\ a\ point,\ you\ get\ a\ circle\ of\ the\ specified\ radius.\r\n\ The\ pen\ radius\ is\ not\ affected\ by\ coordinate\ scaling.\r\n\r\n\ @param\ \ radius\ the\ radius\ of\ the\ pen\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative,\ NaN,\ or\ infinite\r\n
comment25.params=
comment25.target=java.awt.Color\ getPenColor()
comment25.text=\r\n\ Returns\ the\ current\ pen\ color.\r\n\r\n\ @return\ the\ current\ pen\ color\r\n
comment26.params=
comment26.target=void\ setPenColor()
comment26.text=\r\n\ Sets\ the\ pen\ color\ to\ the\ default\ color\ (black).\r\n
comment27.params=color
comment27.target=void\ setPenColor(java.awt.Color)
comment27.text=\r\n\ Sets\ the\ pen\ color\ to\ the\ specified\ color.\r\n\ <p>\r\n\ The\ predefined\ pen\ colors\ are\r\n\ {@code\ StdDraw.BLACK},\ {@code\ StdDraw.BLUE},\ {@code\ StdDraw.CYAN},\r\n\ {@code\ StdDraw.DARK_GRAY},\ {@code\ StdDraw.GRAY},\ {@code\ StdDraw.GREEN},\r\n\ {@code\ StdDraw.LIGHT_GRAY},\ {@code\ StdDraw.MAGENTA},\ {@code\ StdDraw.ORANGE},\r\n\ {@code\ StdDraw.PINK},\ {@code\ StdDraw.RED},\ {@code\ StdDraw.WHITE},\ and\r\n\ {@code\ StdDraw.YELLOW}.\r\n\r\n\ @param\ color\ the\ color\ to\ make\ the\ pen\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ color}\ is\ {@code\ null}\r\n
comment28.params=red\ green\ blue
comment28.target=void\ setPenColor(int,\ int,\ int)
comment28.text=\r\n\ Sets\ the\ pen\ color\ to\ the\ specified\ RGB\ color.\r\n\r\n\ @param\ \ red\ the\ amount\ of\ red\ (between\ 0\ and\ 255)\r\n\ @param\ \ green\ the\ amount\ of\ green\ (between\ 0\ and\ 255)\r\n\ @param\ \ blue\ the\ amount\ of\ blue\ (between\ 0\ and\ 255)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ red},\ {@code\ green},\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ blue}\ is\ outside\ its\ prescribed\ range\r\n
comment29.params=
comment29.target=java.awt.Font\ getFont()
comment29.text=\r\n\ Returns\ the\ current\ font.\r\n\r\n\ @return\ the\ current\ font\r\n
comment3.params=
comment3.target=void\ init()
comment30.params=
comment30.target=void\ setFont()
comment30.text=\r\n\ Sets\ the\ font\ to\ the\ default\ font\ (sans\ serif,\ 16\ point).\r\n
comment31.params=font
comment31.target=void\ setFont(java.awt.Font)
comment31.text=\r\n\ Sets\ the\ font\ to\ the\ specified\ value.\r\n\r\n\ @param\ font\ the\ font\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ font}\ is\ {@code\ null}\r\n
comment32.params=x0\ y0\ x1\ y1
comment32.target=void\ line(double,\ double,\ double,\ double)
comment32.text=\r\n\ Draws\ a\ line\ segment\ between\ (<em>x</em><sub>0</sub>,\ <em>y</em><sub>0</sub>)\ and\r\n\ (<em>x</em><sub>1</sub>,\ <em>y</em><sub>1</sub>).\r\n\r\n\ @param\ \ x0\ the\ <em>x</em>-coordinate\ of\ one\ endpoint\r\n\ @param\ \ y0\ the\ <em>y</em>-coordinate\ of\ one\ endpoint\r\n\ @param\ \ x1\ the\ <em>x</em>-coordinate\ of\ the\ other\ endpoint\r\n\ @param\ \ y1\ the\ <em>y</em>-coordinate\ of\ the\ other\ endpoint\r\n\ @throws\ IllegalArgumentException\ if\ any\ coordinate\ is\ either\ NaN\ or\ infinite\r\n
comment33.params=x\ y
comment33.target=void\ pixel(double,\ double)
comment33.text=\r\n\ Draws\ one\ pixel\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ This\ method\ is\ private\ because\ pixels\ depend\ on\ the\ display.\r\n\ To\ achieve\ the\ same\ effect,\ set\ the\ pen\ radius\ to\ 0\ and\ call\ {@code\ point()}.\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ pixel\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ pixel\r\n\ @throws\ IllegalArgumentException\ if\ {\\code\ x}\ or\ {\\code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment34.params=x\ y
comment34.target=void\ point(double,\ double)
comment34.text=\r\n\ Draws\ a\ point\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ The\ point\ is\ a\ filled\ circle\ whose\ radius\ is\ equal\ to\ the\ pen\ radius.\r\n\ To\ draw\ a\ single-pixel\ point,\ first\ set\ the\ pen\ radius\ to\ 0.\r\n\r\n\ @param\ x\ the\ <em>x</em>-coordinate\ of\ the\ point\r\n\ @param\ y\ the\ <em>y</em>-coordinate\ of\ the\ point\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment35.params=x\ y\ radius
comment35.target=void\ circle(double,\ double,\ double)
comment35.text=\r\n\ Draws\ a\ circle\ of\ the\ specified\ radius,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ radius\ the\ radius\ of\ the\ circle\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment36.params=x\ y\ radius
comment36.target=void\ filledCircle(double,\ double,\ double)
comment36.text=\r\n\ Draws\ a\ filled\ circle\ of\ the\ specified\ radius,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ radius\ the\ radius\ of\ the\ circle\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment37.params=x\ y\ semiMajorAxis\ semiMinorAxis
comment37.target=void\ ellipse(double,\ double,\ double,\ double)
comment37.text=\r\n\ Draws\ an\ ellipse\ with\ the\ specified\ semimajor\ and\ semiminor\ axes,\r\n\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ semiMajorAxis\ is\ the\ semimajor\ axis\ of\ the\ ellipse\r\n\ @param\ \ semiMinorAxis\ is\ the\ semiminor\ axis\ of\ the\ ellipse\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ semiMajorAxis}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ semiMinorAxis}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment38.params=x\ y\ semiMajorAxis\ semiMinorAxis
comment38.target=void\ filledEllipse(double,\ double,\ double,\ double)
comment38.text=\r\n\ Draws\ an\ ellipse\ with\ the\ specified\ semimajor\ and\ semiminor\ axes,\r\n\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ semiMajorAxis\ is\ the\ semimajor\ axis\ of\ the\ ellipse\r\n\ @param\ \ semiMinorAxis\ is\ the\ semiminor\ axis\ of\ the\ ellipse\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ semiMajorAxis}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ semiMinorAxis}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment39.params=x\ y\ radius\ angle1\ angle2
comment39.target=void\ arc(double,\ double,\ double,\ double,\ double)
comment39.text=\r\n\ Draws\ a\ circular\ arc\ of\ the\ specified\ radius,\r\n\ centered\ at\ (<em>x</em>,\ <em>y</em>),\ from\ angle1\ to\ angle2\ (in\ degrees).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ radius\ the\ radius\ of\ the\ circle\r\n\ @param\ \ angle1\ the\ starting\ angle.\ 0\ would\ mean\ an\ arc\ beginning\ at\ 3\ o'clock.\r\n\ @param\ \ angle2\ the\ angle\ at\ the\ end\ of\ the\ arc.\ For\ example,\ if\r\n\ \ \ \ \ \ \ \ \ you\ want\ a\ 90\ degree\ arc,\ then\ angle2\ should\ be\ angle1\ +\ 90.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment4.params=
comment4.target=javax.swing.JMenuBar\ createMenuBar()
comment40.params=x\ y\ halfLength
comment40.target=void\ square(double,\ double,\ double)
comment40.text=\r\n\ Draws\ a\ square\ of\ side\ length\ 2r,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ halfLength\ one\ half\ the\ length\ of\ any\ side\ of\ the\ square\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ halfLength}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment41.params=x\ y\ halfLength
comment41.target=void\ filledSquare(double,\ double,\ double)
comment41.text=\r\n\ Draws\ a\ filled\ square\ of\ the\ specified\ size,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ halfLength\ one\ half\ the\ length\ of\ any\ side\ of\ the\ square\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ halfLength}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment42.params=x\ y\ halfWidth\ halfHeight
comment42.target=void\ rectangle(double,\ double,\ double,\ double)
comment42.text=\r\n\ Draws\ a\ rectangle\ of\ the\ specified\ size,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ halfWidth\ one\ half\ the\ width\ of\ the\ rectangle\r\n\ @param\ \ halfHeight\ one\ half\ the\ height\ of\ the\ rectangle\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ halfWidth}\ or\ {@code\ halfHeight}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment43.params=x\ y\ halfWidth\ halfHeight
comment43.target=void\ filledRectangle(double,\ double,\ double,\ double)
comment43.text=\r\n\ Draws\ a\ filled\ rectangle\ of\ the\ specified\ size,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ halfWidth\ one\ half\ the\ width\ of\ the\ rectangle\r\n\ @param\ \ halfHeight\ one\ half\ the\ height\ of\ the\ rectangle\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ halfWidth}\ or\ {@code\ halfHeight}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment44.params=x\ y
comment44.target=void\ polygon(double[],\ double[])
comment44.text=\r\n\ Draws\ a\ polygon\ with\ the\ vertices\ \r\n\ (<em>x</em><sub>0</sub>,\ <em>y</em><sub>0</sub>),\r\n\ (<em>x</em><sub>1</sub>,\ <em>y</em><sub>1</sub>),\ ...,\r\n\ (<em>x</em><sub><em>n</em>\uFFFD1</sub>,\ <em>y</em><sub><em>n</em>\uFFFD1</sub>).\r\n\r\n\ @param\ \ x\ an\ array\ of\ all\ the\ <em>x</em>-coordinates\ of\ the\ polygon\r\n\ @param\ \ y\ an\ array\ of\ all\ the\ <em>y</em>-coordinates\ of\ the\ polygon\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ x[]}\ and\ {@code\ y[]}\r\n\ \ \ \ \ \ \ \ \ are\ of\ the\ same\ length\r\n\ @throws\ IllegalArgumentException\ if\ any\ coordinate\ is\ either\ NaN\ or\ infinite\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ x[]}\ or\ {@code\ y[]}\ is\ {@code\ null}\r\n
comment45.params=x\ y
comment45.target=void\ filledPolygon(double[],\ double[])
comment45.text=\r\n\ Draws\ a\ polygon\ with\ the\ vertices\ \r\n\ (<em>x</em><sub>0</sub>,\ <em>y</em><sub>0</sub>),\r\n\ (<em>x</em><sub>1</sub>,\ <em>y</em><sub>1</sub>),\ ...,\r\n\ (<em>x</em><sub><em>n</em>\uFFFD1</sub>,\ <em>y</em><sub><em>n</em>\uFFFD1</sub>).\r\n\r\n\ @param\ \ x\ an\ array\ of\ all\ the\ <em>x</em>-coordinates\ of\ the\ polygon\r\n\ @param\ \ y\ an\ array\ of\ all\ the\ <em>y</em>-coordinates\ of\ the\ polygon\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ x[]}\ and\ {@code\ y[]}\r\n\ \ \ \ \ \ \ \ \ are\ of\ the\ same\ length\r\n\ @throws\ IllegalArgumentException\ if\ any\ coordinate\ is\ either\ NaN\ or\ infinite\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ x[]}\ or\ {@code\ y[]}\ is\ {@code\ null}\r\n
comment46.params=filename
comment46.target=java.awt.Image\ getImage(java.lang.String)
comment46.text=\r\n\ \ Drawing\ images.\r\n
comment47.params=x\ y\ filename
comment47.target=void\ picture(double,\ double,\ java.lang.String)
comment47.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ The\ supported\ image\ formats\ are\ JPEG,\ PNG,\ and\ GIF.\r\n\ As\ an\ optimization,\ the\ picture\ is\ cached,\ so\ there\ is\ no\ performance\r\n\ penalty\ for\ redrawing\ the\ same\ image\ multiple\ times\ (e.g.,\ in\ an\ animation).\r\n\ However,\ if\ you\ change\ the\ picture\ file\ after\ drawing\ it,\ subsequent\r\n\ calls\ will\ draw\ the\ original\ picture.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment48.params=x\ y\ filename\ degrees
comment48.target=void\ picture(double,\ double,\ java.lang.String,\ double)
comment48.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>),\r\n\ rotated\ given\ number\ of\ degrees.\r\n\ The\ supported\ image\ formats\ are\ JPEG,\ PNG,\ and\ GIF.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ \ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x},\ {@code\ y},\ {@code\ degrees}\ is\ NaN\ or\ infinite\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ filename}\ is\ {@code\ null}\r\n
comment49.params=x\ y\ filename\ scaledWidth\ scaledHeight
comment49.target=void\ picture(double,\ double,\ java.lang.String,\ double,\ double)
comment49.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>),\r\n\ rescaled\ to\ the\ specified\ bounding\ box.\r\n\ The\ supported\ image\ formats\ are\ JPEG,\ PNG,\ and\ GIF.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ \ scaledWidth\ the\ width\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @param\ \ scaledHeight\ the\ height\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ scaledWidth}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ scaledHeight}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ filename}\ is\ {@code\ null}\r\n
comment5.params=x\ name
comment5.target=void\ validate(double,\ java.lang.String)
comment5.text=\r\n\ \ User\ and\ screen\ coordinate\ systems.\r\n
comment50.params=x\ y\ filename\ scaledWidth\ scaledHeight\ degrees
comment50.target=void\ picture(double,\ double,\ java.lang.String,\ double,\ double,\ double)
comment50.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>),\ rotated\r\n\ given\ number\ of\ degrees,\ and\ rescaled\ to\ the\ specified\ bounding\ box.\r\n\ The\ supported\ image\ formats\ are\ JPEG,\ PNG,\ and\ GIF.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ \ scaledWidth\ the\ width\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @param\ \ scaledHeight\ the\ height\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @param\ \ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ scaledWidth}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ scaledHeight}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n
comment51.params=x\ y\ text
comment51.target=void\ text(double,\ double,\ java.lang.String)
comment51.text=\r\n\ Writes\ the\ given\ text\ string\ in\ the\ current\ font,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\ to\ write\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ text}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment52.params=x\ y\ text\ degrees
comment52.target=void\ text(double,\ double,\ java.lang.String,\ double)
comment52.text=\r\n\ Writes\ the\ given\ text\ string\ in\ the\ current\ font,\ centered\ at\ (<em>x</em>,\ <em>y</em>)\ and\r\n\ rotated\ by\ the\ specified\ number\ of\ degrees.\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\ to\ write\r\n\ @param\ \ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ text}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x},\ {@code\ y},\ or\ {@code\ degrees}\ is\ either\ NaN\ or\ infinite\r\n
comment53.params=x\ y\ text
comment53.target=void\ textLeft(double,\ double,\ java.lang.String)
comment53.text=\r\n\ Writes\ the\ given\ text\ string\ in\ the\ current\ font,\ left-aligned\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ text}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment54.params=x\ y\ text
comment54.target=void\ textRight(double,\ double,\ java.lang.String)
comment54.text=\r\n\ Writes\ the\ given\ text\ string\ in\ the\ current\ font,\ right-aligned\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\ to\ write\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ text}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment55.params=t
comment55.target=void\ show(int)
comment55.text=\r\n\ Copies\ the\ offscreen\ buffer\ to\ the\ onscreen\ buffer,\ pauses\ for\ t\ milliseconds\r\n\ and\ enables\ double\ buffering.\r\n\ @param\ t\ number\ of\ milliseconds\r\n\ @deprecated\ replaced\ by\ {@link\ \#enableDoubleBuffering()},\ {@link\ \#show()},\ and\ {@link\ \#pause(int\ t)}\r\n
comment56.params=t
comment56.target=void\ pause(int)
comment56.text=\r\n\ Pauses\ for\ t\ milliseconds.\ This\ method\ is\ intended\ to\ support\ computer\ animations.\r\n\ @param\ t\ number\ of\ milliseconds\r\n
comment57.params=
comment57.target=void\ show()
comment57.text=\r\n\ Copies\ offscreen\ buffer\ to\ onscreen\ buffer.\ There\ is\ no\ reason\ to\ call\r\n\ this\ method\ unless\ double\ buffering\ is\ enabled.\r\n
comment58.params=
comment58.target=void\ draw()
comment59.params=
comment59.target=void\ enableDoubleBuffering()
comment59.text=\r\n\ Enables\ double\ buffering.\ All\ subsequent\ calls\ to\ \r\n\ drawing\ methods\ such\ as\ {@code\ line()},\ {@code\ circle()},\r\n\ and\ {@code\ square()}\ will\ be\ deffered\ until\ the\ next\ call\r\n\ to\ show().\ Useful\ for\ animations.\r\n
comment6.params=x\ name
comment6.target=void\ validateNonnegative(double,\ java.lang.String)
comment60.params=
comment60.target=void\ disableDoubleBuffering()
comment60.text=\r\n\ Disables\ double\ buffering.\ All\ subsequent\ calls\ to\ \r\n\ drawing\ methods\ such\ as\ {@code\ line()},\ {@code\ circle()},\r\n\ and\ {@code\ square()}\ will\ be\ displayed\ on\ screen\ when\ called.\r\n\ This\ is\ the\ default.\r\n
comment61.params=filename
comment61.target=void\ save(java.lang.String)
comment61.text=\r\n\ Saves\ the\ drawing\ to\ using\ the\ specified\ filename.\r\n\ The\ supported\ image\ formats\ are\ JPEG\ and\ PNG;\r\n\ the\ filename\ suffix\ must\ be\ {@code\ .jpg}\ or\ {@code\ .png}.\r\n\r\n\ @param\ \ filename\ the\ name\ of\ the\ file\ with\ one\ of\ the\ required\ suffixes\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ filename}\ is\ {@code\ null}\r\n
comment62.params=e
comment62.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment62.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment63.params=
comment63.target=boolean\ isMousePressed()
comment63.text=\r\n\ Returns\ true\ if\ the\ mouse\ is\ being\ pressed.\r\n\r\n\ @return\ {@code\ true}\ if\ the\ mouse\ is\ being\ pressed;\ {@code\ false}\ otherwise\r\n
comment64.params=
comment64.target=boolean\ mousePressed()
comment64.text=\r\n\ Returns\ true\ if\ the\ mouse\ is\ being\ pressed.\r\n\r\n\ @return\ {@code\ true}\ if\ the\ mouse\ is\ being\ pressed;\ {@code\ false}\ otherwise\r\n\ @deprecated\ replaced\ by\ {@link\ \#isMousePressed()}\r\n
comment65.params=
comment65.target=double\ mouseX()
comment65.text=\r\n\ Returns\ the\ <em>x</em>-coordinate\ of\ the\ mouse.\r\n\r\n\ @return\ the\ <em>x</em>-coordinate\ of\ the\ mouse\r\n
comment66.params=
comment66.target=double\ mouseY()
comment66.text=\r\n\ Returns\ the\ <em>y</em>-coordinate\ of\ the\ mouse.\r\n\r\n\ @return\ <em>y</em>-coordinate\ of\ the\ mouse\r\n
comment67.params=e
comment67.target=void\ mouseClicked(java.awt.event.MouseEvent)
comment67.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment68.params=e
comment68.target=void\ mouseEntered(java.awt.event.MouseEvent)
comment68.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment69.params=e
comment69.target=void\ mouseExited(java.awt.event.MouseEvent)
comment69.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment7.params=x\ name
comment7.target=void\ validateNotNull(java.lang.Object,\ java.lang.String)
comment70.params=e
comment70.target=void\ mousePressed(java.awt.event.MouseEvent)
comment70.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment71.params=e
comment71.target=void\ mouseReleased(java.awt.event.MouseEvent)
comment71.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment72.params=e
comment72.target=void\ mouseDragged(java.awt.event.MouseEvent)
comment72.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment73.params=e
comment73.target=void\ mouseMoved(java.awt.event.MouseEvent)
comment73.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment74.params=
comment74.target=boolean\ hasNextKeyTyped()
comment74.text=\r\n\ Returns\ true\ if\ the\ user\ has\ typed\ a\ key\ (that\ has\ not\ yet\ been\ processed).\r\n\r\n\ @return\ {@code\ true}\ if\ the\ user\ has\ typed\ a\ key\ (that\ has\ not\ yet\ been\ processed\r\n\ \ \ \ \ \ \ \ \ by\ {@link\ \#nextKeyTyped()};\ {@code\ false}\ otherwise\r\n
comment75.params=
comment75.target=char\ nextKeyTyped()
comment75.text=\r\n\ Returns\ the\ next\ key\ that\ was\ typed\ by\ the\ user\ (that\ your\ program\ has\ not\ already\ processed).\r\n\ This\ method\ should\ be\ preceded\ by\ a\ call\ to\ {@link\ \#hasNextKeyTyped()}\ to\ ensure\r\n\ that\ there\ is\ a\ next\ key\ to\ process.\r\n\ This\ method\ returns\ a\ Unicode\ character\ corresponding\ to\ the\ key\r\n\ typed\ (such\ as\ {@code\ 'a'}\ or\ {@code\ 'A'}).\r\n\ It\ cannot\ identify\ action\ keys\ (such\ as\ F1\ and\ arrow\ keys)\r\n\ or\ modifier\ keys\ (such\ as\ control).\r\n\r\n\ @return\ the\ next\ key\ typed\ by\ the\ user\ (that\ your\ program\ has\ not\ already\ processed).\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ remaining\ key\r\n
comment76.params=keycode
comment76.target=boolean\ isKeyPressed(int)
comment76.text=\r\n\ Returns\ true\ if\ the\ given\ key\ is\ being\ pressed.\r\n\ <p>\r\n\ This\ method\ takes\ the\ keycode\ (corresponding\ to\ a\ physical\ key)\r\n\ \ as\ an\ argument.\ It\ can\ handle\ action\ keys\r\n\ (such\ as\ F1\ and\ arrow\ keys)\ and\ modifier\ keys\ (such\ as\ shift\ and\ control).\r\n\ See\ {@link\ KeyEvent}\ for\ a\ description\ of\ key\ codes.\r\n\r\n\ @param\ \ keycode\ the\ key\ to\ check\ if\ it\ is\ being\ pressed\r\n\ @return\ {@code\ true}\ if\ {@code\ keycode}\ is\ currently\ being\ pressed;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment77.params=e
comment77.target=void\ keyTyped(java.awt.event.KeyEvent)
comment77.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment78.params=e
comment78.target=void\ keyPressed(java.awt.event.KeyEvent)
comment78.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment79.params=e
comment79.target=void\ keyReleased(java.awt.event.KeyEvent)
comment79.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment8.params=
comment8.target=void\ setXscale()
comment8.text=\r\n\ Sets\ the\ <em>x</em>-scale\ to\ be\ the\ default\ (between\ 0.0\ and\ 1.0).\r\n
comment80.params=args
comment80.target=void\ main(java.lang.String[])
comment80.text=\r\n\ Test\ client.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment9.params=
comment9.target=void\ setYscale()
comment9.text=\r\n\ Sets\ the\ <em>y</em>-scale\ to\ be\ the\ default\ (between\ 0.0\ and\ 1.0).\r\n
numComments=81
