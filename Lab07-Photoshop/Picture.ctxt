#BlueJ class context
comment0.params=picture
comment0.target=Picture(java.lang.String)
comment0.text=\r\n\ Creates\ a\ Picture\ from\ an\ image\ file\ in\ the\ "images"\ directory\r\n\ @param\ picture\ The\ name\ of\ the\ file\ to\ load\r\n
comment1.params=red\ green\ blue\ height\ width
comment1.target=Picture(int,\ int,\ int,\ int,\ int)
comment1.text=\r\n\ Creates\ a\ solid-color\ Picture\ of\ a\ given\ color,\ width,\ and\ height\r\n\ @param\ red\ The\ red\ value\ of\ the\ color\r\n\ @param\ green\ The\ green\ value\ of\ the\ color\r\n\ @param\ blue\ The\ blue\ value\ of\ the\ color\r\n\ @param\ height\ The\ height\ of\ the\ Picture\r\n\ @param\ width\ The\ width\ of\ the\ Picture\r\n
comment10.params=
comment10.target=PictureViewer\ view()
comment10.text=\r\n\ Opens\ a\ {@link\ PictureViewer}\ to\ view\ this\ Picture\r\n\ @return\ the\ {@link\ PictureViewer}\ viewing\ the\ Picture\r\n
comment11.params=
comment11.target=void\ save()
comment11.text=\r\n\ Save\ the\ image\ on\ disk\ as\ a\ JPEG\r\n\ Call\ programmatically\ on\ a\ Picture\ object,\ it\ will\ prompt\ you\ to\ choose\ a\ save\ location\r\n\ In\ the\ save\ dialogue\ window,\ specify\ the\ file\ AND\ extension\ (e.g.\ "lilies.jpg")\r\n\ Extension\ must\ be\ .jpg\ as\ ImageIO\ is\ expecting\ to\ write\ a\ jpeg\r\n
comment12.params=
comment12.target=void\ zeroBlue()
comment12.text=remove\ all\ blue\ tint\ from\ a\ picture
comment13.params=
comment13.target=void\ keepOnlyBlue()
comment13.text=remove\ everything\ BUT\ blue\ tint\ from\ a\ picture
comment14.params=
comment14.target=void\ negate()
comment14.text=invert\ a\ picture's\ colors
comment15.params=threshold
comment15.target=void\ solarize(int)
comment15.text=simulate\ the\ over-exposure\ of\ a\ picture\ in\ film\ processing
comment16.params=
comment16.target=void\ grayscale()
comment16.text=convert\ an\ image\ to\ grayscale
comment17.params=red\ blue\ green
comment17.target=void\ tint(double,\ double,\ double)
comment17.text=change\ the\ tint\ of\ the\ picture\ by\ the\ supplied\ coefficients
comment18.params=span
comment18.target=void\ posterize(int)
comment18.text=reduces\ the\ number\ of\ colors\ in\ an\ image\ to\ create\ a\ "graphic\ poster"\ effect
comment19.params=
comment19.target=void\ mirrorVertical()
comment19.text=mirror\ an\ image\ about\ a\ vertical\ midline,\ left\ to\ right
comment2.params=height\ width
comment2.target=Picture(int,\ int)
comment2.text=\r\n\ Creates\ a\ solid\ white\ Picture\ of\ a\ given\ width\ and\ height\r\n\ @param\ color\ The\ {@link\ Color}\ of\ the\ Picture\r\n\ @param\ height\ The\ height\ of\ the\ Picture\r\n\ @param\ width\ The\ width\ of\ the\ Picture\r\n
comment20.params=
comment20.target=void\ mirrorRightToLeft()
comment20.text=mirror\ about\ a\ vertical\ midline,\ right\ to\ left
comment21.params=
comment21.target=void\ mirrorHorizontal()
comment21.text=mirror\ about\ a\ horizontal\ midline,\ top\ to\ bottom
comment22.params=
comment22.target=void\ verticalFlip()
comment22.text=flip\ an\ image\ upside\ down\ about\ its\ bottom\ edge
comment23.params=
comment23.target=void\ fixRoof()
comment23.text=fix\ roof\ on\ greek\ temple
comment24.params=dist
comment24.target=void\ edgeDetection(int)
comment24.text=detect\ and\ mark\ edges\ in\ an\ image
comment25.params=other\ color\ dist
comment25.target=void\ chromakey(Picture,\ java.awt.Color,\ int)
comment25.text=copy\ another\ picture's\ pixels\ into\ this\ picture,\ if\ a\ color\ is\ within\ dist\ of\ param\ Color
comment26.params=msg
comment26.target=void\ encode(Picture)
comment26.text=steganography\ encode\ (hide\ the\ message\ in\ msg\ in\ this\ picture)
comment27.params=
comment27.target=Picture\ decode()
comment27.text=steganography\ decode\ (return\ a\ new\ Picture\ containing\ the\ message\ hidden\ in\ this\ picture)
comment28.params=
comment28.target=Picture\ simpleBlur()
comment28.text=perform\ a\ simple\ blur\ using\ the\ colors\ of\ neighboring\ pixels
comment29.params=radius
comment29.target=Picture\ blur(int)
comment29.text=perform\ a\ blur\ using\ the\ colors\ of\ pixels\ within\ radius\ of\ current\ pixel
comment3.params=color\ height\ width
comment3.target=Picture(java.awt.Color,\ int,\ int)
comment3.text=\r\n\ Creates\ a\ solid-color\ Picture\ of\ a\ given\ color,\ width,\ and\ height\r\n\ @param\ color\ The\ {@link\ Color}\ of\ the\ Picture\r\n\ @param\ width\ The\ width\ of\ the\ Picture\r\n\ @param\ height\ The\ height\ of\ the\ Picture\r\n
comment30.params=dist
comment30.target=Picture\ glassFilter(int)
comment30.text=\r\n\ Simulate\ looking\ at\ an\ image\ through\ a\ pane\ of\ glass\r\n\ @param\ dist\ the\ "radius"\ of\ the\ neighboring\ pixels\ to\ use\r\n\ @return\ a\ new\ Picture\ with\ the\ glass\ filter\ applied\r\n
comment4.params=pixels
comment4.target=Picture(Pixel[][])
comment4.text=\r\n\ Creates\ a\ Picture\ based\ off\ of\ an\ existing\ {@link\ Pixel}\ 2D\ array\r\n\ @param\ pixels\ A\ rectangular\ 2D\ array\ of\ {@link\ Pixel}s.\ Must\ be\ at\ least\ 1x1\r\n
comment5.params=picture
comment5.target=Picture(Picture)
comment5.text=\r\n\ Creates\ a\ Picture\ based\ off\ of\ an\ existing\ Picture\r\n\ @param\ picture\ The\ Picture\ to\ copy\r\n
comment6.params=
comment6.target=int\ getWidth()
comment6.text=\r\n\ Gets\ the\ width\ of\ the\ Picture\r\n\ @return\ The\ width\ of\ the\ Picture\r\n
comment7.params=
comment7.target=int\ getHeight()
comment7.text=\r\n\ Gets\ the\ height\ of\ the\ Picture\r\n\ @return\ The\ height\ of\ the\ Picture\r\n
comment8.params=x\ y
comment8.target=Pixel\ getPixel(int,\ int)
comment8.text=\r\n\ Gets\ the\ {@link\ Pixel}\ at\ a\ given\ coordinate\r\n\ @param\ x\ The\ x\ location\ of\ the\ {@link\ Pixel}\r\n\ @param\ y\ The\ y\ location\ of\ the\ {@link\ Pixel}\r\n\ @return\ The\ {@link\ Pixel}\ at\ the\ given\ location\r\n
comment9.params=x\ y\ pixel
comment9.target=void\ setPixel(int,\ int,\ Pixel)
comment9.text=\r\n\ Sets\ the\ {@link\ Pixel}\ at\ a\ given\ coordinate\r\n\ @param\ x\ The\ x\ location\ of\ the\ {@link\ Pixel}\r\n\ @param\ y\ The\ y\ location\ of\ the\ {@link\ Pixel}\r\n\ @param\ pixel\ The\ new\ {@link\ Pixel}\r\n
numComments=31
